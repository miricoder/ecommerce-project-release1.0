{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this.cartItems = []; //For storing data using Web Storage API - to prevent item loss in upon page refresh and login \n      //Session Storage is a reference to web browser's session storage not that of HttpSession \n      // storage: Storage = sessionStorage; --> Items are lost when tab or the browser is closed\n\n      this.storage = localStorage; //Unlick Session storage items are not lost when tab or browser is closed \n      //Subject si replaced with BehaviorSubject in order to replay the latest message to CheckoutComponent cart review method\n\n      this.totalPrice = new BehaviorSubject(0);\n      this.totalQuantity = new BehaviorSubject(0); //read data from storage - Web Storage API \n      //cartItems is the key, JSON.parse(...) - Reads JSON string and converst to object \n\n      let data = JSON.parse(this.storage.getItem('cartItems'));\n\n      if (data != null) {\n        this.cartItems = data; //compute totals based on the data that is read from storage \n\n        this.computeCartTotals();\n      }\n    }\n\n    addToCart(theCartItem) {\n      // check if we already have the item in our cart\n      let alreadyExistsInCart = false;\n      let existingCartItem = undefined;\n\n      if (this.cartItems.length > 0) {\n        // find the item in the cart based on item id\n        //>>>>>>>Below For loop has been refactored to a one line code with using find() method which handles looping on the background\n        // for (let tempCartItem of this.cartItems) {\n        //   if (tempCartItem.id === theCartItem.id) {\n        //     existingCartItem = tempCartItem;\n        //     break;\n        //   }\n        // }\n        //<<<<<<<<Refactored code below\n        existingCartItem = this.cartItems.find(tempCartItem => tempCartItem.id === theCartItem.id); // check if we found it\n\n        alreadyExistsInCart = existingCartItem != undefined;\n      }\n\n      if (alreadyExistsInCart) {\n        // increment the quantity\n        existingCartItem.quantity++;\n      } else {\n        // just add the item to the array\n        this.cartItems.push(theCartItem);\n      } // compute cart total price and total quantity\n\n\n      this.computeCartTotals();\n    }\n\n    computeCartTotals() {\n      let totalPriceValue = 0;\n      let totalQuantityValue = 0;\n\n      for (let currentCartItem of this.cartItems) {\n        totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n        totalQuantityValue += currentCartItem.quantity;\n      } //publish the new values ... all subscribers will receieve the new data\n\n\n      this.totalPrice.next(totalPriceValue);\n      this.totalQuantity.next(totalQuantityValue); // log cart data for debugging purposes\n\n      this.logCartData(totalPriceValue, totalQuantityValue); //Calling persistCartItems to persist cart data \n\n      this.persistCartItems();\n    }\n\n    logCartData(totalPriceValue, totalQuantityValue) {\n      console.log('Contents of the carts');\n\n      for (let tempCartItem of this.cartItems) {\n        const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n        console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\n      }\n\n      console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n      console.log('----');\n    }\n\n    decrementQuantity(theCartItem) {\n      theCartItem.quantity--;\n\n      if (theCartItem.quantity === 0) {\n        this.remove(theCartItem);\n      } else {\n        this.computeCartTotals();\n      }\n    }\n\n    remove(theCartItem) {\n      // get the index of item in the array\n      const itemIndex = this.cartItems.findIndex(tempCartItem => tempCartItem.id == theCartItem.id); // if found, remove the item from the array at the given index \n\n      if (itemIndex > -1) {\n        this.cartItems.splice(itemIndex, 1);\n        this.computeCartTotals();\n      }\n    } //Used for the persisting data in Web Storage API \n\n\n    persistCartItems() {\n      //cartItems -> KEY \n      //this.cartItems -> VALUE \n      //JSON.stringify(...) Converts object to JSON string \n      //- because with Web Storage API everything is a string \n      this.storage.setItem('cartItems', JSON.stringify(this.cartItems));\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}