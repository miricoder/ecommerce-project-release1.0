{"ast":null,"code":"import _asyncToGenerator from \"/Users/miralimirzayev/Desktop/Spring/FULLStackDev_BOOT_CAMP/ecommerce-project-release1.0/03-frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { from } from 'rxjs';\nimport { lastValueFrom } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@okta/okta-angular\";\nexport class AuthInterceptorService {\n  constructor(oktaAuth) {\n    this.oktaAuth = oktaAuth;\n  }\n\n  intercept(request, next) {\n    return from(this.handleAccess(request, next));\n  }\n\n  handleAccess(request, next) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Only add an access token for secured endpoints\n      const endPoint = environment.luv2shopApiUrl + '/orders';\n      const securedEndpoints = [endPoint];\n\n      if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n        // get access token\n        const accessToken = yield _this.oktaAuth.getAccessToken(); // clone the request and add new header with access token\n\n        request = request.clone({\n          setHeaders: {\n            Authorization: 'Bearer ' + accessToken\n          }\n        });\n      }\n\n      return yield lastValueFrom(next.handle(request));\n    })();\n  }\n\n}\n\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.OktaAuthService));\n};\n\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/miralimirzayev/Desktop/Spring/FULLStackDev_BOOT_CAMP/ecommerce-project-release1.0/03-frontend/angular-ecommerce/src/app/services/auth-interceptor.service.ts"],"names":["from","lastValueFrom","environment","i0","i1","AuthInterceptorService","constructor","oktaAuth","intercept","request","next","handleAccess","endPoint","luv2shopApiUrl","securedEndpoints","some","url","urlWithParams","includes","accessToken","getAccessToken","clone","setHeaders","Authorization","handle","ɵfac","AuthInterceptorService_Factory","t","ɵɵinject","OktaAuthService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,IAAT,QAAqB,MAArB;AACA,SAASC,aAAT,QAA8B,MAA9B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,OAAO,MAAMC,sBAAN,CAA6B;AAChCC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDC,EAAAA,SAAS,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACrB,WAAOV,IAAI,CAAC,KAAKW,YAAL,CAAkBF,OAAlB,EAA2BC,IAA3B,CAAD,CAAX;AACH;;AACKC,EAAAA,YAAY,CAACF,OAAD,EAAUC,IAAV,EAAgB;AAAA;;AAAA;AAC9B;AACA,YAAME,QAAQ,GAAGV,WAAW,CAACW,cAAZ,GAA6B,SAA9C;AACA,YAAMC,gBAAgB,GAAG,CAACF,QAAD,CAAzB;;AACA,UAAIE,gBAAgB,CAACC,IAAjB,CAAsBC,GAAG,IAAIP,OAAO,CAACQ,aAAR,CAAsBC,QAAtB,CAA+BF,GAA/B,CAA7B,CAAJ,EAAuE;AACnE;AACA,cAAMG,WAAW,SAAS,KAAI,CAACZ,QAAL,CAAca,cAAd,EAA1B,CAFmE,CAGnE;;AACAX,QAAAA,OAAO,GAAGA,OAAO,CAACY,KAAR,CAAc;AACpBC,UAAAA,UAAU,EAAE;AACRC,YAAAA,aAAa,EAAE,YAAYJ;AADnB;AADQ,SAAd,CAAV;AAKH;;AACD,mBAAalB,aAAa,CAACS,IAAI,CAACc,MAAL,CAAYf,OAAZ,CAAD,CAA1B;AAd8B;AAejC;;AAtB+B;;AAwBpCJ,sBAAsB,CAACoB,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,SAAO,KAAKA,CAAC,IAAItB,sBAAV,EAAkCF,EAAE,CAACyB,QAAH,CAAYxB,EAAE,CAACyB,eAAf,CAAlC,CAAP;AAA4E,CAAvJ;;AACAxB,sBAAsB,CAACyB,KAAvB,GAA+B,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,sBAAT;AAAiC4B,EAAAA,OAAO,EAAE5B,sBAAsB,CAACoB,IAAjE;AAAuES,EAAAA,UAAU,EAAE;AAAnF,CAAtB,CAA7C","sourcesContent":["import { from } from 'rxjs';\nimport { lastValueFrom } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@okta/okta-angular\";\nexport class AuthInterceptorService {\n    constructor(oktaAuth) {\n        this.oktaAuth = oktaAuth;\n    }\n    intercept(request, next) {\n        return from(this.handleAccess(request, next));\n    }\n    async handleAccess(request, next) {\n        // Only add an access token for secured endpoints\n        const endPoint = environment.luv2shopApiUrl + '/orders';\n        const securedEndpoints = [endPoint];\n        if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n            // get access token\n            const accessToken = await this.oktaAuth.getAccessToken();\n            // clone the request and add new header with access token\n            request = request.clone({\n                setHeaders: {\n                    Authorization: 'Bearer ' + accessToken\n                }\n            });\n        }\n        return await lastValueFrom(next.handle(request));\n    }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) { return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.OktaAuthService)); };\nAuthInterceptorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthInterceptorService, factory: AuthInterceptorService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}