{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIterator = require(\"@babel/runtime-corejs3/core-js/get-iterator\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.divideActionParamsByMutability = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof _Symbol === \"undefined\" || _getIteratorMethod(o) == null) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = _getIterator(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nvar isFieldMutable = function isFieldMutable(field) {\n  // mutable defaults to true, annoyingly\n  return field.mutable !== false;\n};\n\nvar divideSingleActionParamsByMutability = function divideSingleActionParamsByMutability(action) {\n  var defaultParamsForAction = {}; // mutable and present\n\n  var neededParamsForAction = []; // mutable values\n\n  var immutableParamsForAction = {}; // immutable\n  // TODO: remove assumption that form names are unique, neededParams being an array is a temp fix\n  // not all actions have value (e.g. redirect)\n  // making sure they are not empty and instead hold the remediation object\n\n  if (!action.value) {\n    neededParamsForAction.push(action);\n    return {\n      defaultParamsForAction: defaultParamsForAction,\n      neededParamsForAction: neededParamsForAction,\n      immutableParamsForAction: immutableParamsForAction\n    };\n  }\n\n  var _iterator = _createForOfIteratorHelper(action.value),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var field = _step.value;\n\n      if (isFieldMutable(field)) {\n        var _field$value;\n\n        neededParamsForAction.push(field);\n\n        if ((_field$value = field.value) !== null && _field$value !== void 0 ? _field$value : false) {\n          defaultParamsForAction[field.name] = field.value;\n        }\n      } else {\n        var _field$value2;\n\n        immutableParamsForAction[field.name] = (_field$value2 = field.value) !== null && _field$value2 !== void 0 ? _field$value2 : '';\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    defaultParamsForAction: defaultParamsForAction,\n    neededParamsForAction: neededParamsForAction,\n    immutableParamsForAction: immutableParamsForAction\n  };\n};\n\nvar divideActionParamsByMutability = function divideActionParamsByMutability(actionList) {\n  // TODO: when removing form name is unique assumption, this may all be redundant\n  actionList = (0, _isArray.default)(actionList) ? actionList : [actionList];\n  var neededParams = [];\n  var defaultParams = {};\n  var immutableParams = {};\n\n  var _iterator2 = _createForOfIteratorHelper(actionList),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var action = _step2.value;\n\n      var _divideSingleActionPa = divideSingleActionParamsByMutability(action),\n          defaultParamsForAction = _divideSingleActionPa.defaultParamsForAction,\n          neededParamsForAction = _divideSingleActionPa.neededParamsForAction,\n          immutableParamsForAction = _divideSingleActionPa.immutableParamsForAction;\n\n      neededParams.push(neededParamsForAction);\n      defaultParams[action.name] = defaultParamsForAction;\n      immutableParams[action.name] = immutableParamsForAction;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    defaultParams: defaultParams,\n    neededParams: neededParams,\n    immutableParams: immutableParams\n  };\n};\n\nexports.divideActionParamsByMutability = divideActionParamsByMutability;","map":null,"metadata":{},"sourceType":"script"}