{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _idxResponseParser = require(\"./idxResponseParser\");\n/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nvar makeIdxState = function makeIdxState(idxResponse, toPersist) {\n  var _rawIdxResponse$succe, _context2;\n\n  var rawIdxResponse = idxResponse;\n\n  var _parseIdxResponse = (0, _idxResponseParser.parseIdxResponse)(idxResponse, toPersist),\n      remediations = _parseIdxResponse.remediations,\n      context = _parseIdxResponse.context,\n      actions = _parseIdxResponse.actions;\n\n  var neededToProceed = (0, _toConsumableArray2.default)(remediations);\n\n  var proceed = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(remediationChoice) {\n      var paramsFromUser,\n          remediationChoiceObject,\n          _args = arguments;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              paramsFromUser = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              /*\n              remediationChoice is the name attribute on each form\n              name should remain unique for items inside the remediation that are considered forms(identify, select-factor)\n              name can be duplicate for items like redirect where its not considered a form(redirect)\n              when names are not unique its a redirect to a href, so widget wont POST to idx-js layer.\n              */\n\n              remediationChoiceObject = (0, _find.default)(remediations).call(remediations, function (remediation) {\n                return remediation.name === remediationChoice;\n              });\n\n              if (remediationChoiceObject) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _promise.default.reject(\"Unknown remediation choice: [\".concat(remediationChoice, \"]\")));\n\n            case 4:\n              return _context.abrupt(\"return\", remediationChoiceObject.action(paramsFromUser));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function proceed(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var hasInteractionCode = function hasInteractionCode() {\n    return !!rawIdxResponse.successWithInteractionCode;\n  };\n\n  var findCode = function findCode(item) {\n    return item.name === 'interaction_code';\n  };\n\n  var interactionCode = (_rawIdxResponse$succe = rawIdxResponse.successWithInteractionCode) === null || _rawIdxResponse$succe === void 0 ? void 0 : (0, _find.default)(_context2 = _rawIdxResponse$succe.value).call(_context2, findCode).value;\n  return {\n    proceed: proceed,\n    neededToProceed: neededToProceed,\n    actions: actions,\n    context: context,\n    rawIdxState: rawIdxResponse,\n    hasInteractionCode: hasInteractionCode,\n    interactionCode: interactionCode,\n    toPersist: toPersist\n  };\n};\n\nvar _default = makeIdxState;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}