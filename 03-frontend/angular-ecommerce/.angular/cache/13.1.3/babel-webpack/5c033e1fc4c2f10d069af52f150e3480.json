{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.request = exports.HttpClient = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _crossFetch = _interopRequireDefault(require(\"cross-fetch\"));\n\nvar _userAgent = require(\"./userAgent\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context3;\n\n      _forEachInstanceProperty2(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context4;\n\n      _forEachInstanceProperty2(_context4 = ownKeys(Object(source))).call(_context4, function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Reusable interceptor interface\n */\n\n\nfunction Interceptor() {\n  this.handlers = []; // Adds a new interceptor to our HttpClient\n\n  this.use = function (before) {\n    this.handlers.push({\n      before: before\n    });\n  }; // Clears all interceptors\n\n\n  this.clear = function () {\n    this.handlers = [];\n  };\n}\n/**\n * Singleton instance of the IdX HTTP Client\n *\n * Invoke the `use` method to add a new interceptor:\n *   - client.interceptors.request.use((requestConfig) => { some logic });\n */\n\n\nvar HttpClient = {\n  interceptors: {\n    request: new Interceptor()\n  }\n};\nexports.HttpClient = HttpClient;\n\nvar request = /*#__PURE__*/function () {\n  var _request = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(target, _ref) {\n    var _ref$method, method, _ref$headers, headers, _ref$credentials, credentials, body, requestOptions, _context, url;\n\n    return _regenerator.default.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref$method = _ref.method, method = _ref$method === void 0 ? 'POST' : _ref$method, _ref$headers = _ref.headers, headers = _ref$headers === void 0 ? {} : _ref$headers, _ref$credentials = _ref.credentials, credentials = _ref$credentials === void 0 ? 'include' : _ref$credentials, body = _ref.body;\n            requestOptions = {\n              url: target,\n              method: method,\n              headers: _objectSpread(_objectSpread({}, (0, _userAgent.userAgentHeaders)()), headers),\n              credentials: credentials,\n              body: body\n            };\n\n            if (HttpClient.interceptors) {\n              (0, _forEach.default)(_context = HttpClient.interceptors.request.handlers).call(_context, function (interceptor) {\n                interceptor.before(requestOptions);\n              });\n            } // Extract the URL to adhere to the fetch API\n\n\n            url = requestOptions.url;\n            delete requestOptions.url;\n            return _context2.abrupt(\"return\", (0, _crossFetch.default)(url, requestOptions));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function request(_x, _x2) {\n    return _request.apply(this, arguments);\n  }\n\n  return request;\n}();\n\nexports.request = request;","map":null,"metadata":{},"sourceType":"script"}