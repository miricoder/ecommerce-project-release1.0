{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _filterInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.parseIdxResponse = exports.parseNonRemediations = void 0;\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/objectWithoutProperties\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _fromEntries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/from-entries\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _remediationParser = require(\"./remediationParser\");\n\nvar _generateIdxAction = _interopRequireDefault(require(\"./generateIdxAction\"));\n\nvar _jsonpathPlus = require(\"jsonpath-plus\");\n\nvar _context;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) symbols = _filterInstanceProperty2(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context8;\n\n      _forEachInstanceProperty2(_context8 = ownKeys(Object(source), true)).call(_context8, function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context9;\n\n      _forEachInstanceProperty2(_context9 = ownKeys(Object(source))).call(_context9, function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar SKIP_FIELDS = (0, _fromEntries.default)((0, _map.default)(_context = ['remediation', // remediations are put into proceed/neededToProceed\n'context' // the API response of 'context' isn't externally useful.  We ignore it and put all non-action (contextual) info into idxState.context\n]).call(_context, function (field) {\n  return [field, !!'skip this field'];\n}));\n\nvar parseNonRemediations = function parseNonRemediations(idxResponse) {\n  var _context2, _context3;\n\n  var toPersist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var actions = {};\n  var context = {};\n  (0, _forEach.default)(_context2 = (0, _filter.default)(_context3 = (0, _keys.default)(idxResponse)).call(_context3, function (field) {\n    return !SKIP_FIELDS[field];\n  })).call(_context2, function (field) {\n    var _context4;\n\n    var fieldIsObject = (0, _typeof2.default)(idxResponse[field]) === 'object' && !!idxResponse[field];\n\n    if (!fieldIsObject) {\n      // simple fields are contextual info\n      context[field] = idxResponse[field];\n      return;\n    }\n\n    if (idxResponse[field].rel) {\n      // top level actions\n      actions[idxResponse[field].name] = (0, _generateIdxAction.default)(idxResponse[field], toPersist);\n      return;\n    }\n\n    var _idxResponse$field = idxResponse[field],\n        fieldValue = _idxResponse$field.value,\n        type = _idxResponse$field.type,\n        info = (0, _objectWithoutProperties2.default)(_idxResponse$field, [\"value\", \"type\"]);\n    context[field] = _objectSpread({\n      type: type\n    }, info); // add the non-action parts as context\n\n    if (type !== 'object') {\n      // only object values hold actions\n      context[field].value = fieldValue;\n      return;\n    } // We are an object field containing an object value\n\n\n    context[field].value = {};\n    (0, _forEach.default)(_context4 = (0, _entries.default)(fieldValue)).call(_context4, function (_ref) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n          subField = _ref2[0],\n          value = _ref2[1];\n\n      if (value.rel) {\n        var _context5; // is [field].value[subField] an action?\n        // add any \"action\" value subfields to actions\n\n\n        actions[(0, _concat.default)(_context5 = \"\".concat(field, \"-\")).call(_context5, subField.name || subField)] = (0, _generateIdxAction.default)(value, toPersist);\n      } else {\n        // add non-action value subfields to context\n        context[field].value[subField] = value;\n      }\n    });\n  });\n  return {\n    context: context,\n    actions: actions\n  };\n};\n\nexports.parseNonRemediations = parseNonRemediations;\n\nvar expandRelatesTo = function expandRelatesTo(idxResponse, value) {\n  var _context6;\n\n  (0, _forEach.default)(_context6 = (0, _keys.default)(value)).call(_context6, function (k) {\n    if (k === 'relatesTo') {\n      var query = (0, _isArray.default)(value[k]) ? value[k][0] : value[k];\n\n      if (typeof query === 'string') {\n        // eslint-disable-next-line new-cap\n        var result = (0, _jsonpathPlus.JSONPath)({\n          path: query,\n          json: idxResponse\n        })[0];\n\n        if (result) {\n          value[k] = result;\n          return;\n        }\n      }\n    }\n\n    if ((0, _isArray.default)(value[k])) {\n      var _context7;\n\n      (0, _forEach.default)(_context7 = value[k]).call(_context7, function (innerValue) {\n        return expandRelatesTo(idxResponse, innerValue);\n      });\n    }\n  });\n};\n\nvar convertRemediationAction = function convertRemediationAction(remediation, toPersist) {\n  var remediationActions = (0, _remediationParser.generateRemediationFunctions)([remediation], toPersist);\n  var actionFn = remediationActions[remediation.name];\n  return _objectSpread(_objectSpread({}, remediation), {}, {\n    action: actionFn\n  });\n};\n\nvar parseIdxResponse = function parseIdxResponse(idxResponse) {\n  var _idxResponse$remediat;\n\n  var toPersist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var remediationData = ((_idxResponse$remediat = idxResponse.remediation) === null || _idxResponse$remediat === void 0 ? void 0 : _idxResponse$remediat.value) || [];\n  (0, _forEach.default)(remediationData).call(remediationData, function (remediation) {\n    return expandRelatesTo(idxResponse, remediation);\n  });\n  var remediations = (0, _map.default)(remediationData).call(remediationData, function (remediation) {\n    return convertRemediationAction(remediation, toPersist);\n  });\n\n  var _parseNonRemediations = parseNonRemediations(idxResponse, toPersist),\n      context = _parseNonRemediations.context,\n      actions = _parseNonRemediations.actions;\n\n  return {\n    remediations: remediations,\n    context: context,\n    actions: actions\n  };\n};\n\nexports.parseIdxResponse = parseIdxResponse;","map":null,"metadata":{},"sourceType":"script"}